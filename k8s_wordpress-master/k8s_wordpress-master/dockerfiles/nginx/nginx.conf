nginx worker_processes auto; error_log /var/log/nginx/error.log; pid /run/nginx.pid; events { worker_connections 1024; } http { include /opt/openresty/nginx/conf/mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] "$request" ' '$status $body_bytes_sent "$http_referer" ' '"$http_user_agent" "$http_x_forwarded_for"'; access_log /var/log/nginx/access.log main; sendfile on; #tcp_nopush on; keepalive_timeout 65; #gzip on; upstream wordpress { server my-release-wordpress:80; } init_by_lua_block { -- ðŸ›‘ MODIFIED: Initialize Prometheus metrics collector ðŸ›‘ local prometheus = require("resty.prometheus").init({ allow_no_file = true }) prometheus:add_default_metrics() } server { listen 80; server_name localhost; location / { proxy_pass http://my-release-wordpress:80; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; access_by_lua_block { -- Add any access control logic here } header_filter_by_lua_block { ngx.header["X-Powered-By"] = "OpenResty" } body_filter_by_lua_block { -- Modify response body if needed } log_by_lua_block { -- ðŸ›‘ MODIFIED: Log request status to Prometheus metrics ðŸ›‘ local status = tonumber(ngx.var.status) local prometheus = require("resty.prometheus") if status then -- This metric is tracked by PromQL queries: nginx_http_requests_total prometheus:inc("nginx_http_requests_total", 1, { status = status }) end } } -- ðŸ›‘ ADDED: New location for Prometheus Scraper ðŸ›‘ location /metrics { content_by_lua_block { local prometheus = require("resty.prometheus") prometheus:collect() } } location /nginx_status { stub_status on; access_log off; allow 127.0.0.1; deny all; } error_page 500 502 503 504 /50x.html; location = /50x.html { root /opt/openresty/nginx/html; } } }
