apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: {{ .Values.nginx.image.repository }}:{{ .Values.nginx.image.tag }}
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /opt/openresty/nginx/conf/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: nginx-config
        configMap:
          name: {{ .Release.Name }}-nginx-config

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-nginx
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: "80"
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: NodePort 

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-nginx-config
data:
  nginx.conf: |
    worker_processes auto;
    events {
        worker_connections 1024;
    }
    http {
        init_by_lua_block {
            local prometheus = require("resty.prometheus").init({ allow_no_file = true })
            prometheus:add_default_metrics()
        }

        server {
            listen 80;
            server_name localhost;

            location /metrics {
                content_by_lua_block {
                    local prometheus = require("resty.prometheus")
                    prometheus:collect()
                }
            }
            
            location / {
                proxy_pass http://{{ .Release.Name }}-wordpress:80;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;

                log_by_lua_block {
                    local status = tonumber(ngx.var.status)
                    local prometheus = require("resty.prometheus")
                    if status then
                        prometheus:inc("nginx_http_requests_total", 1, { status = status })
                    end
                }
            }
        }
    }
